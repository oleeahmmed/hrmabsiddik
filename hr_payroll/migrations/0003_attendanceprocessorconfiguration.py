# Generated by Django 5.1.4 on 2025-09-26 11:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        ('hr_payroll', '0002_employee_per_hour_rate'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AttendanceProcessorConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Configuration', max_length=100, verbose_name='Configuration Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('grace_minutes', models.PositiveIntegerField(default=15, help_text='Late arrival grace period in minutes', verbose_name='Grace Minutes')),
                ('early_out_threshold_minutes', models.PositiveIntegerField(default=30, help_text='Minutes before end time to consider as early departure', verbose_name='Early Out Threshold (minutes)')),
                ('overtime_start_after_minutes', models.PositiveIntegerField(default=15, help_text='Minutes after scheduled end time to start overtime calculation', verbose_name='Overtime Start After (minutes)')),
                ('minimum_overtime_minutes', models.PositiveIntegerField(default=60, help_text='Minimum overtime duration to be eligible for overtime pay', verbose_name='Minimum Overtime Minutes')),
                ('weekend_friday', models.BooleanField(default=True, verbose_name='Friday Weekend')),
                ('weekend_saturday', models.BooleanField(default=False, verbose_name='Saturday Weekend')),
                ('weekend_sunday', models.BooleanField(default=False, verbose_name='Sunday Weekend')),
                ('weekend_monday', models.BooleanField(default=False, verbose_name='Monday Weekend')),
                ('weekend_tuesday', models.BooleanField(default=False, verbose_name='Tuesday Weekend')),
                ('weekend_wednesday', models.BooleanField(default=False, verbose_name='Wednesday Weekend')),
                ('weekend_thursday', models.BooleanField(default=False, verbose_name='Thursday Weekend')),
                ('default_break_minutes', models.PositiveIntegerField(default=60, help_text="Default break time if shift doesn't specify", verbose_name='Default Break Time (minutes)')),
                ('use_shift_break_time', models.BooleanField(default=True, help_text='Use shift-specific break time instead of default', verbose_name='Use Shift Break Time')),
                ('break_deduction_method', models.CharField(choices=[('fixed', 'Fixed'), ('proportional', 'Proportional')], default='fixed', help_text='Method to calculate break time deduction', max_length=20, verbose_name='Break Deduction Method')),
                ('enable_minimum_working_hours_rule', models.BooleanField(default=False, help_text='Convert present to absent if working hours below threshold', verbose_name='Enable Minimum Working Hours Rule')),
                ('minimum_working_hours_for_present', models.FloatField(default=4.0, help_text='Minimum hours required to mark as present', verbose_name='Minimum Working Hours for Present')),
                ('enable_working_hours_half_day_rule', models.BooleanField(default=False, help_text='Convert to half day based on working hours range', verbose_name='Enable Working Hours Half Day Rule')),
                ('half_day_minimum_hours', models.FloatField(default=4.0, help_text='Minimum hours for half day qualification', verbose_name='Half Day Minimum Hours')),
                ('half_day_maximum_hours', models.FloatField(default=6.0, help_text='Maximum hours for half day qualification', verbose_name='Half Day Maximum Hours')),
                ('require_both_in_and_out', models.BooleanField(default=False, help_text='Mark as absent if either check-in or check-out is missing', verbose_name='Require Both In and Out Time')),
                ('enable_maximum_working_hours_rule', models.BooleanField(default=False, help_text='Flag records with excessive working hours', verbose_name='Enable Maximum Working Hours Rule')),
                ('maximum_allowable_working_hours', models.FloatField(default=16.0, help_text='Maximum allowed working hours per day', verbose_name='Maximum Allowable Working Hours')),
                ('enable_dynamic_shift_detection', models.BooleanField(default=False, help_text='Automatically detect shift based on attendance pattern', verbose_name='Enable Dynamic Shift Detection')),
                ('dynamic_shift_tolerance_minutes', models.PositiveIntegerField(default=30, help_text='Tolerance in minutes for shift pattern matching', verbose_name='Dynamic Shift Tolerance (minutes)')),
                ('multiple_shift_priority', models.CharField(choices=[('least_break', 'Least Break Time'), ('shortest_duration', 'Shortest Duration'), ('alphabetical', 'Alphabetical'), ('highest_score', 'Highest Score')], default='least_break', help_text='Priority method when multiple shifts match', max_length=20, verbose_name='Multiple Shift Priority')),
                ('dynamic_shift_fallback_to_default', models.BooleanField(default=True, help_text="Use employee's default shift if dynamic detection fails", verbose_name='Dynamic Shift Fallback to Default')),
                ('use_shift_grace_time', models.BooleanField(default=False, help_text='Use grace time from shift instead of global grace time', verbose_name='Use Shift-Specific Grace Time')),
                ('enable_consecutive_absence_flagging', models.BooleanField(default=False, help_text='Flag employees with consecutive absences as termination risk', verbose_name='Enable Consecutive Absence Flagging')),
                ('consecutive_absence_termination_risk_days', models.PositiveIntegerField(default=5, help_text='Number of consecutive absent days to flag as termination risk', verbose_name='Consecutive Absence Risk Days')),
                ('enable_max_early_out_flagging', models.BooleanField(default=False, help_text='Flag employees with excessive early departures', verbose_name='Enable Max Early Out Flagging')),
                ('max_early_out_threshold_minutes', models.PositiveIntegerField(default=120, help_text='Minutes of early departure to consider excessive', verbose_name='Max Early Out Threshold (minutes)')),
                ('max_early_out_occurrences', models.PositiveIntegerField(default=3, help_text='Number of early departures in a month to flag', verbose_name='Max Early Out Occurrences')),
                ('overtime_calculation_method', models.CharField(choices=[('shift_based', 'Shift Based'), ('employee_based', 'Employee Based'), ('fixed_hours', 'Fixed Hours')], default='employee_based', help_text='Method to calculate overtime', max_length=20, verbose_name='Overtime Calculation Method')),
                ('holiday_overtime_full_day', models.BooleanField(default=True, help_text='Count all holiday working hours as overtime', verbose_name='Holiday Overtime Full Day')),
                ('weekend_overtime_full_day', models.BooleanField(default=True, help_text='Count all weekend working hours as overtime', verbose_name='Weekend Overtime Full Day')),
                ('late_affects_overtime', models.BooleanField(default=False, help_text='Reduce overtime if employee arrives late', verbose_name='Late Arrival Affects Overtime')),
                ('separate_ot_break_time', models.PositiveIntegerField(default=0, help_text='Additional break time to deduct from overtime', verbose_name='Separate OT Break Time (minutes)')),
                ('use_employee_specific_grace', models.BooleanField(default=True, help_text='Use employee-specific grace time if available', verbose_name='Use Employee Specific Grace')),
                ('use_employee_specific_overtime', models.BooleanField(default=True, help_text='Use employee-specific overtime settings if available', verbose_name='Use Employee Specific Overtime')),
                ('use_employee_expected_hours', models.BooleanField(default=True, help_text='Use employee-specific expected working hours', verbose_name='Use Employee Expected Hours')),
                ('late_to_absent_days', models.PositiveIntegerField(default=3, help_text='Convert late to absent after consecutive late days', verbose_name='Late to Absent Days')),
                ('holiday_before_after_absent', models.BooleanField(default=True, help_text='Consider attendance around holidays for absence rules', verbose_name='Holiday Before/After Absent')),
                ('weekend_before_after_absent', models.BooleanField(default=True, help_text='Consider attendance around weekends for absence rules', verbose_name='Weekend Before/After Absent')),
                ('require_holiday_presence', models.BooleanField(default=False, help_text='Require attendance on designated working holidays', verbose_name='Require Holiday Presence')),
                ('include_holiday_analysis', models.BooleanField(default=True, help_text='Include holiday patterns in attendance analysis', verbose_name='Include Holiday Analysis')),
                ('holiday_buffer_days', models.PositiveIntegerField(default=1, help_text='Days before/after holiday to consider for analysis', verbose_name='Holiday Buffer Days')),
                ('show_absent_employees', models.BooleanField(default=True, help_text='Include absent employees in reports', verbose_name='Show Absent Employees')),
                ('show_leave_employees', models.BooleanField(default=True, help_text='Include employees on leave in reports', verbose_name='Show Leave Employees')),
                ('show_holiday_status', models.BooleanField(default=True, help_text='Show holiday information in reports', verbose_name='Show Holiday Status')),
                ('include_roster_info', models.BooleanField(default=True, help_text='Include roster information in attendance records', verbose_name='Include Roster Info')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company', verbose_name='Company')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_attendance_configs', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('dynamic_shift_fallback_shift', models.ForeignKey(blank=True, help_text='Fixed shift to use if dynamic detection fails and no default shift', null=True, on_delete=django.db.models.deletion.SET_NULL, to='hr_payroll.shift', verbose_name='Fallback Shift')),
            ],
            options={
                'verbose_name': 'Attendance Processor Configuration',
                'verbose_name_plural': 'Attendance Processor Configurations',
                'ordering': ['-is_active', 'name'],
                'unique_together': {('company', 'name')},
            },
        ),
    ]
